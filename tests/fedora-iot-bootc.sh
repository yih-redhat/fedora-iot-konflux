#!/bin/bash
set -euox pipefail

./setup.sh

# Local variables
TEST_UUID=qcow2-$((1 + RANDOM % 1000000))
VM_NAME="fedora-iot-${TEST_UUID}"
GUEST_ADDRESS=192.168.100.50
SSH_USER="admin"

# Set up temporary files.
TEMPDIR=$(mktemp -d)

# SSH setup.
SSH_OPTIONS=(-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5)
SSH_KEY=key/ostree_key
SSH_KEY_PUB=$(cat "${SSH_KEY}".pub)
EDGE_USER_PASSWORD=foobar

#IMAGE_URL="quay.io/bootc-devel/fedora-bootc-rawhide-iot:latest"
IMAGE_URL="registry.stage.redhat.io/rhel10/rhel-bootc:10.0"
#BIB_URL="quay.io/centos-bootc/bootc-image-builder:latest"
BIB_URL="registry.stage.redhat.io/rhel10/bootc-image-builder:10.0"

# Colorful output.
function greenprint {
    echo -e "\033[1;32m${1}\033[0m"
}

wait_for_ssh_up () {
    SSH_STATUS=$(sudo ssh "${SSH_OPTIONS[@]}" -i "${SSH_KEY}" "${SSH_USER}@${1}" '/bin/bash -c "echo -n READY"')
    if [[ $SSH_STATUS == READY ]]; then
        echo 1
    else
        echo 0
    fi
}

check_result () {
    greenprint "🎏 Checking for test result"
    if [[ $RESULTS == 1 ]]; then
        greenprint "💚 Success"
    else
        greenprint "❌ Failed"
        exit 1
    fi
}

sudo dnf install -y \
    cargo \
    openssl \
    openssl-devel \
    git \
    make \
    systemd \
    krb5-devel \
    python3-docutils \
    gpgme-devel \
    libassuan-devel \
    systemd-rpm-macros \
    rpmdevtools \
    golang \
    go-rpm-macros \
    python3-devel \
    selinux-policy-devel \
    device-mapper-devel \
    podman \
    qemu-img \
    qemu-kvm \
    libvirt-client \
    libvirt-daemon-kvm \
    libvirt-daemon \
    virt-install

# Login to Stage registry
podman login quay.io -u ${QUAY_USERNAME} -p ${QUAY_PASSWORD}
sudo podman login -u "${STAGE_REDHAT_IO_USERNAME}" -p "${STAGE_REDHAT_IO_TOKEN}" registry.stage.redhat.io
copy files/rhel.repo .
# Prepare Containerfile
tee Containerfile > /dev/null << STOPHERE
FROM ${IMAGE_URL}
RUN echo 'root' | passwd --stdin root
COPY rhel.repo /etc/yum.repos.d/
RUN dnf install -y \
    fdo-init \
    fdo-client \
    clevis \
    clevis-dracut \
    clevis-luks \
    clevis-pin-tpm2 \
    clevis-systemd
RUN systemctl enable fdo-client-linuxapp.service
STOPHERE

podman build  --retry=5 --retry-delay=10s -t quay.io/${QUAY_USERNAME}/fedora-iot-bootc:${TEST_UUID} -f Containerfile .
greenprint "Pushing bootc container to quay.io"
podman push quay.io/${QUAY_USERNAME}/fedora-iot-bootc:${TEST_UUID}

# Create config.toml with kickstart information
tee config.toml > /dev/null << STOPHERE
[customizations.installer.kickstart]
contents = """
text
lang en_US.UTF-8
keyboard us
timezone --utc Etc/UTC
selinux --enforcing
rootpw --plaintext root
user --name=${SSH_USER} --groups=wheel --iscrypted --password=\$6\$GRmb7S0p8vsYmXzH\$o0E020S.9JQGaHkszoog4ha4AQVs3sk8q0DvLjSMxoxHBKnB2FBXGQ/OkwZQfW/76ktHd0NX5nls2LPxPuUdl.
sshkey --username=${SSH_USER} "${SSH_KEY_PUB}"
bootloader --timeout=1 --append="net.ifnames=0 modprobe.blacklist=vc4"
network --bootproto=dhcp --device=link --activate --onboot=on
zerombr
clearpart --all --initlabel --disklabel=msdos
autopart --nohome --noswap --type=plain
poweroff
%post --log=/var/log/anaconda/post-install.log --erroronfail
export MANUFACTURING_SERVER_URL="http://192.168.100.1:8080"
export DIUN_PUB_KEY_INSECURE="true"
/usr/libexec/fdo/fdo-manufacturing-client
# no sudo password for SSH user
echo -e 'admin\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers
# Remove any persistent NIC rules generated by udev
rm -vf /etc/udev/rules.d/*persistent-net*.rules
# And ensure that we will do DHCP on eth0 on startup
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
PERSISTENT_DHCLIENT="yes"
EOF
echo "Packages within this iot or edge image:"
echo "-----------------------------------------------------------------------"
rpm -qa | sort
echo "-----------------------------------------------------------------------"
# Note that running rpm recreates the rpm db files which aren't needed/wanted
rm -f /var/lib/rpm/__db*
echo "Zeroing out empty space."
# This forces the filesystem to reclaim space from deleted files
dd bs=1M if=/dev/zero of=/var/tmp/zeros || :
rm -f /var/tmp/zeros
echo "(Don't worry -- that out-of-space error was expected.)"
%end
"""
STOPHERE

# greenprint "Using BIB to convert container to qcow2"
# tee config.json > /dev/null << EOF
# {
#   "blueprint": {
#     "customizations": {
#       "user": [
#         {
#           "name": "${SSH_USER}",
#           "password": "${EDGE_USER_PASSWORD}",
#           "key": "${SSH_KEY_PUB}",
#           "groups": [
#             "wheel"
#           ]
#         }
#       ],
#       "fdo": [
#         {
#           "manufacturing_server_url": "http://192.168.100.1:8080",
#           "diun_pub_key_insecure": "true"
#         }
#       ]
#     }
#   }
# }
# EOF


sudo rm -fr output && mkdir -p output
sudo podman run \
    --rm \
    -it \
    --privileged \
    --pull=newer \
    --security-opt label=type:unconfined_t \
    -v $(pwd)/config.toml:/config.toml:ro \
    -v $(pwd)/output:/output \
    -v /var/lib/containers/storage:/var/lib/containers/storage \
    ${BIB_URL} \
    --type iso \
    --config /config.toml \
    --rootfs xfs \
    --use-librepo=true \
    quay.io/${QUAY_USERNAME}/greenboot-bootc:${TEST_UUID}

sudo qemu-img create -f qcow2 /var/lib/libvirt/images/fdo-iso.qcow2 20G
sudo cp output/bootiso/install.iso /var/lib/libvirt/images/
sudo restorecon -Rv /var/lib/libvirt/images/
sudo virt-install  --name="${VM_NAME}" \
                --disk path=/var/lib/libvirt/images/fdo-iso.qcow2,format=qcow2 \
                --ram 4096 \
                --vcpus 2 \
                --network network=integration,mac=34:49:22:B0:83:30 \
                --os-type linux \
                --os-variant rhel10-unknown \
                --cdrom /var/lib/libvirt/images/install.iso \
                --boot uefi \
                --tpm backend.type=emulator,backend.version=2.0,model=tpm-crb \
                --nographics \
                --noautoconsole \
                --wait=-1 \
                --noreboot

# Start VM.
greenprint "Start VM"
sudo virsh start "${VM_NAME}"

# podman run \
#     --rm \
#     -it \
#     --privileged \
#     --pull=newer \
#     --security-opt label=type:unconfined_t \
#     -v $(pwd)/config.json:/config.json \
#     -v $(pwd)/output:/output \
#     -v /var/lib/containers/storage:/var/lib/containers/storage \
#     ${BIB_URL} \
#     --type qcow2 \
#     --config /config.json \
#     --rootfs xfs \
#     --use-librepo=true \
#     quay.io/${QUAY_USERNAME}/greenboot-bootc:${TEST_UUID}

# greenprint "Installing vm with bootc qcow2/iso image"
# mv $(pwd)/output/qcow2/disk.qcow2 /var/lib/libvirt/images/${TEST_UUID}-disk.qcow2
# LIBVIRT_IMAGE_PATH_UEFI=/var/lib/libvirt/images/${TEST_UUID}-disk.qcow2
# sudo restorecon -Rv /var/lib/libvirt/images/

# sudo virt-install  --name="${TEST_UUID}-uefi"\
#                    --disk path="${LIBVIRT_IMAGE_PATH_UEFI}",format=qcow2 \
#                    --ram 3072 \
#                    --vcpus 2 \
#                    --network network=integration,mac=34:49:22:B0:83:30 \
#                    --os-type linux \
#                    --os-variant fedora-unknown \
#                    --boot uefi \
#                    --nographics \
#                    --noautoconsole \
#                    --wait=-1 \
#                    --import \
#                    --noreboot

# greenprint "Starting UEFI VM"
# sudo virsh start "${TEST_UUID}-uefi"

# Check for ssh ready to go.
greenprint "🛃 Checking for SSH is ready to go"
for _ in $(seq 0 30); do
    RESULTS="$(wait_for_ssh_up $GUEST_ADDRESS)"
    if [[ $RESULTS == 1 ]]; then
        echo "SSH is ready now! 🥳"
        break
    fi
    sleep 10
done

# Check image installation result
check_result

# Add instance IP address into /etc/ansible/hosts
tee "${TEMPDIR}"/inventory > /dev/null << EOF
[image_mode_guest]
${GUEST_ADDRESS}
[image_mode_guest:vars]
ansible_python_interpreter=/usr/bin/python3
ansible_user=${SSH_USER}
ansible_private_key_file=${SSH_KEY}
ansible_ssh_common_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
ansible_become=yes
ansible_become_method=sudo
ansible_become_pass=${EDGE_USER_PASSWORD}
EOF

# Test IoT/Edge OS
podman run --network=host --annotation run.oci.keep_original_groups=1 -v "$(pwd)":/work:z -v "${TEMPDIR}":/tmp:z --rm quay.io/rhel-edge/ansible-runner:latest ansible-playbook -v -i /tmp/inventory -e fdo_credential="true" check.yaml || RESULTS=0

# Check test result
check_result

exit 0
